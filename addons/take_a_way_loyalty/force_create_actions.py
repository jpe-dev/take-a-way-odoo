# -*- coding: utf-8 -*-
"""
Script pour forcer la cr√©ation des actions heure pr√©vue
"""

from odoo import api, fields, models
import logging

_logger = logging.getLogger(__name__)

def force_create_actions():
    """Force la cr√©ation des actions heure pr√©vue"""
    
    try:
        # R√©cup√©rer l'environnement Odoo
        env = api.Environment(cr, uid, {})
        
        print("=== Cr√©ation forc√©e des actions heure pr√©vue ===")
        print("")
        
        # Cr√©er les actions
        result = env['pos.order']._create_heure_prevue_actions()
        
        if result:
            print("‚úÖ Actions cr√©√©es avec succ√®s!")
        else:
            print("‚ùå Erreur lors de la cr√©ation des actions")
            return False
        
        # V√©rifier que les actions ont √©t√© cr√©√©es
        actions = env['ir.actions.server'].search([
            ('name', 'like', '%heure%'),
            ('model_id.model', '=', 'pos.order')
        ])
        
        print(f"‚úÖ {len(actions)} actions trouv√©es:")
        for action in actions:
            print(f"   - {action.name} (ID: {action.id})")
            print(f"     Binding: {action.binding_model_id.name if action.binding_model_id else 'Aucun'}")
            print(f"     View types: {action.binding_view_types}")
        
        print("")
        print("üìã Instructions:")
        print("1. Allez dans Point de Vente > Commandes")
        print("2. S√©lectionnez une commande")
        print("3. Cliquez sur Actions dans la barre d'outils")
        print("4. Vous devriez voir les actions heure pr√©vue")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des actions: {str(e)}")
        return False

if __name__ == "__main__":
    success = force_create_actions()
    
    if success:
        print("‚úÖ Actions cr√©√©es avec succ√®s!")
    else:
        print("‚ùå √âchec de la cr√©ation des actions") 