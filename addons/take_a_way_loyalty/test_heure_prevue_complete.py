# -*- coding: utf-8 -*-
"""
Test complet pour v√©rifier la fonctionnalit√© heure pr√©vue
"""

from odoo import api, fields, models
from datetime import datetime, timedelta
import logging

_logger = logging.getLogger(__name__)

def test_heure_prevue_complete():
    """Test complet de la fonctionnalit√© heure pr√©vue"""
    
    try:
        # R√©cup√©rer l'environnement Odoo
        env = api.Environment(cr, uid, {})
        
        print("=== Test complet de la fonctionnalit√© heure pr√©vue ===")
        
        # 1. V√©rifier que le champ existe
        pos_order_model = env['pos.order']
        if hasattr(pos_order_model, 'heure_prevue'):
            print("‚úÖ Champ heure_prevue existe dans pos.order")
        else:
            print("‚ùå Champ heure_prevue n'existe pas dans pos.order")
            return False
        
        # 2. Cr√©er une commande PoS de test
        pos_order = env['pos.order'].create({
            'name': 'Test Heure Pr√©vue',
            'date_order': fields.Datetime.now(),
            'amount_total': 25.00,
            'state': 'draft'
        })
        
        print(f"‚úÖ Commande PoS cr√©√©e: {pos_order.name}")
        
        # 3. Tester l'action rapide
        print("üîÑ Test de l'action rapide...")
        result = pos_order.action_set_heure_prevue_rapide()
        print("‚úÖ Action rapide ex√©cut√©e")
        
        # 4. V√©rifier que l'heure pr√©vue a √©t√© d√©finie
        pos_order.refresh()
        if pos_order.heure_prevue:
            print(f"‚úÖ Heure pr√©vue d√©finie: {pos_order.heure_prevue}")
        else:
            print("‚ùå Heure pr√©vue non d√©finie")
            return False
        
        # 5. Tester le wizard
        print("üîÑ Test du wizard...")
        wizard = env['heure.prevue.wizard'].create({
            'pos_order_id': pos_order.id,
            'heure_prevue': fields.Datetime.now() + timedelta(hours=2)
        })
        
        print("‚úÖ Wizard cr√©√©")
        
        # 6. Tester l'action de confirmation du wizard
        result = wizard.action_confirm()
        print("‚úÖ Action de confirmation du wizard ex√©cut√©e")
        
        # 7. V√©rifier que l'heure pr√©vue a √©t√© mise √† jour
        pos_order.refresh()
        print(f"‚úÖ Heure pr√©vue mise √† jour: {pos_order.heure_prevue}")
        
        # 8. V√©rifier les actions serveur
        actions = env['ir.actions.server'].search([
            ('name', 'in', ['D√©finir heure pr√©vue', 'Heure pr√©vue +1h', 'Effacer heure pr√©vue'])
        ])
        
        print(f"‚úÖ {len(actions)} actions serveur trouv√©es")
        
        # 9. V√©rifier les vues
        views = env['ir.ui.view'].search([
            ('name', 'like', '%heure.prevue%')
        ])
        
        print(f"‚úÖ {len(views)} vues trouv√©es")
        
        # 10. Nettoyer
        pos_order.unlink()
        print("‚úÖ Commande de test supprim√©e")
        
        print("üéâ Test complet r√©ussi!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        return False

if __name__ == "__main__":
    success = test_heure_prevue_complete()
    
    if success:
        print("‚úÖ Test complet r√©ussi! La fonctionnalit√© heure pr√©vue fonctionne correctement.")
        print("üìã Instructions pour utiliser:")
        print("1. Allez dans Point de Vente > Commandes")
        print("2. S√©lectionnez une commande")
        print("3. Vous devriez voir:")
        print("   - Le champ 'Heure pr√©vue' dans le formulaire")
        print("   - Les actions dans le menu Actions:")
        print("     * 'D√©finir heure pr√©vue' (ouvre le wizard)")
        print("     * 'Heure pr√©vue +1h' (action rapide)")
        print("     * 'Effacer heure pr√©vue' (efface le champ)")
    else:
        print("‚ùå Test √©chou√©. V√©rifiez les logs pour plus de d√©tails.") 